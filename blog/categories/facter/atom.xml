<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: facter | Darcy Tang's Blog]]></title>
  <link href="http://txworking.github.io/blog/categories/facter/atom.xml" rel="self"/>
  <link href="http://txworking.github.io/"/>
  <updated>2015-01-15T14:00:02+08:00</updated>
  <id>http://txworking.github.io/</id>
  <author>
    <name><![CDATA[Darcy Tang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Facter在Windows上的一个小问题]]></title>
    <link href="http://txworking.github.io/blog/2013/07/08/a-bug-of-facter/"/>
    <updated>2013-07-08T23:37:00+08:00</updated>
    <id>http://txworking.github.io/blog/2013/07/08/a-bug-of-facter</id>
    <content type="html"><![CDATA[<p>最近在Windows上使用Puppet，总是遇到一个诡异的问题：在某些机器上无法获得ipaddress这个fact，直接使用facter命令行也不行，而且显得完全没有规律。</p>

<p>具体情况是：</p>

<ul>
<li>facter 在所有机器上可以获得ipaddress</li>
<li>facter &ndash;puppet 在部分机器上出现 <strong>invalid address</strong> 错误</li>
</ul>


<p><strong>ipaddress</strong>这个fact是在facter/lib/facter/ipaddress.rb添加进来的。关键代码是:
<code>ruby
    Facter.add(:ipaddress) do
      confine :kernel =&gt; %w{windows}
      setcode do
        require 'socket'
        IPSocket.getaddress(Socket.gethostname)
      end
    end
</code>
发现是<strong>IPSocket.getaddress</strong>函数不起作用，于是又把问题定位在Puppet自带的Ruby环境中的<strong>ipaddr.rb</strong>中，发现以下代码在某些机器上无法获得IP。
<code>ruby
alias getaddress_orig getaddress
def getaddress s   
  if valid? s
    s   
  else
    getaddress_orig s   
  end 
end
</code></p>

<p>一开始没发现哪有问题，后来仔细看了下<strong>valid</strong>中的正则表达式，发现不允许<strong>hostname</strong>中出现<strong>下划线</strong>。</p>

<p>之前一直没注意过这问题，所以测试主机的hostname都是随意命名的，所以才会出现部分主机可以通过验证，部分不行的情况。</p>

<p>不过也是现在才知道原来主机名规范有一条是不能带下划线。</p>

<p>Windows命名的时候完全没这个限制，但是在Ubuntu里使用<strong>hostname</strong>命令修改时，如果带下划线会直接提示错误。</p>

<p>很奇怪自己以前在Ubuntu上怎么没遇到过这个错误，难道就鬼使神差的从没使用过带下划线的主机名？</p>

<p>但是现在问题又来了，为什么facter都可以，facter &ndash;puppet就不行呢？</p>

<p>于是又研究了一遍facter的加载机制，在facter取值的部分折腾好久，最后发现和这部分没关系。是因为执行facter时没有加载<strong>facter/lib/facter/ipaddr.rb</strong>，ipaddr.rb中对<strong>IPSocket#getaddress</strong>的重写未生效，直接使用了Puppet自带Ruby中的socket.so中定义的<strong>IPSocket#getaddress</strong>，这个函数定义里面就没有对主机名的正则验证。</p>

<p>想来Puppet也是为了做多平台支持，所以加了一个MonkeyPatch，对主机名做了验证。</p>

<p>现在又绕回来了，&ndash;puppet 到底干了啥？
&#8220;`ruby
     def self.load_puppet
          require &lsquo;puppet&rsquo;
          Puppet.parse_config</p>

<pre><code>      # If you've set 'vardir' but not 'libdir' in your
      # puppet.conf, then the hook to add libdir to $:
      # won't get triggered.  This makes sure that it's setup
      # correctly.
      unless $LOAD_PATH.include?(Puppet[:libdir])
        $LOAD_PATH &lt;&lt; Puppet[:libdir]
      end
    rescue LoadError =&gt; detail
      $stderr.puts "Could not load Puppet: #{detail}"
 end
</code></pre>

<pre><code>根据代码来看，只是把Puppet的**libdir**加入了**\$LOAD\_PATH**。

这个libdir里面都是些自定义的facter、tyep和provider，似乎和ipaddr.rb完全没关系。

又卡在这儿想了半天，才发现思路错了。

ipaddr.rb虽然在lib目录下，但是不会自动加载，需要显式**require**。

于是注释掉
</code></pre>

<pre><code>require 'puppet'
</code></pre>

<p>&#8220;`
使用facter &ndash;puppet也就和正常一样了。</p>
]]></content>
  </entry>
  
</feed>
