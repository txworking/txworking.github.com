<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: razor | Darcy Tang's Blog]]></title>
  <link href="http://txworking.github.io/blog/categories/razor/atom.xml" rel="self"/>
  <link href="http://txworking.github.io/"/>
  <updated>2015-01-15T14:00:02+08:00</updated>
  <id>http://txworking.github.io/</id>
  <author>
    <name><![CDATA[Darcy Tang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Razor的架构研究]]></title>
    <link href="http://txworking.github.io/blog/2013/01/02/razor-architecture/"/>
    <updated>2013-01-02T14:05:00+08:00</updated>
    <id>http://txworking.github.io/blog/2013/01/02/razor-architecture</id>
    <content type="html"><![CDATA[<p><img src="/images/my/razor_mk.png"></p>

<h2>Razor对iPXE的使用</h2>

<p>iPXE是Razor主要依赖的技术，配合iPXE就能实现服务器节点固件和Razor的交互。
iPXE是开源的网络启动固件，提供了全部的PXE功能，而且加入更多的高级特性，
比如：支持从HTTP服务器、iSCSI SAN、FC SAN、AoE SAN、无线网络、广域网、Infiniband网络启动；通过脚本控制boot流程。</p>

<p>Razor主要利用HTTP服务器启动和脚本控制两个特性。</p>

<ul>
<li>部分网卡需要特殊配置以支持通过iPXE安装Razor-Microkernel</li>
</ul>


<h3>服务器启动时</h3>

<p>搭建iPXE服务需要DHCP服务和ftp服务，具体过程就不详述了。
服务器在进行网络启动时，iPXE会根据配置提供两种boot方式。下面的代码清单是iPXE的默认配置。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>default menu.c32
</span><span class='line'>prompt 0
</span><span class='line'>menu title Razor Boot Menu&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;timeout 50
</span><span class='line'>f1 help.txt
</span><span class='line'>f2 version.txt&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;label razor-boot
</span><span class='line'>  menu label Automatic Razor Node Boot
</span><span class='line'>  kernel ipxe.lkrn
</span><span class='line'>  append initrd=razor.ipxe&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;label boot-else
</span><span class='line'>  menu label Bypass Razor
</span><span class='line'>  localboot 1</span></code></pre></td></tr></table></div></figure></p>

<p>可以看到，使用razor-boot方式会下载tftp服务器上的ipxe.lkrn和razor.ipxe脚本文件进行启动，如下图所示</p>

<p><img src="/images/my/ipxe.png"></p>

<p>服务器会根据razor.ipxe脚本文件向Razor Server发起http请求，从这里就开始进入Razor的控制流程。</p>

<pre><code>#!ipxe

isset ${net0/mac} &amp;&amp; dhcp net0 ||
isset ${net1/mac} &amp;&amp; dhcp net1 ||
isset ${net2/mac} &amp;&amp; dhcp net2 ||
isset ${net3/mac} &amp;&amp; dhcp net3 ||
isset ${net4/mac} &amp;&amp; dhcp net4 ||
isset ${net5/mac} &amp;&amp; dhcp net5 ||
isset ${net6/mac} &amp;&amp; dhcp net6 ||
isset ${net7/mac} &amp;&amp; dhcp net7 ||

chain http://168.1.43.39:8026/razor/api/boot?hw_id=${net0/mac}_${net1/mac}_${net2/mac}_${net3/mac}_$
{net4/mac}_${net5/mac}_${net6/mac}_${net7/mac} || goto error

:error
sleep 15
reboot
</code></pre>

<p>Razor最终会返回http应答，其中包含可执行iPXE脚本，告诉服务器按何种方式启动。
比如，服务器是首次启动，则会告诉服务器下载Razor-Microkernel并启动。
下面的代码清单说明Razor返回的执行脚本内容，其中指明了kernel和initrd的下载路径</p>

<pre><code class="ruby">def get_boot_script(default_mk)
        image_svc_uri = "http://#{@config.image_svc_host}:#{@config.image_svc_port}/razor/image/mk/#{default_mk.uuid}"
        rz_mk_boot_debug_level = @config.rz_mk_boot_debug_level
        # only allow values of 'quiet' or 'debug' for this parameter; if it's anything else set it
        # to an empty string
        rz_mk_boot_debug_level = '' unless ['quiet','debug'].include? rz_mk_boot_debug_level
        boot_script = ""
        boot_script &lt;&lt; "#!ipxe\n"
        boot_script &lt;&lt; "kernel #{image_svc_uri}/#{default_mk.kernel} maxcpus=1"
        boot_script &lt;&lt; " #{rz_mk_boot_debug_level}" if rz_mk_boot_debug_level &amp;&amp; !rz_mk_boot_debug_level.empty?
        boot_script &lt;&lt; " || goto error\n"
        boot_script &lt;&lt; "initrd #{image_svc_uri}/#{default_mk.initrd} || goto error\n"
        boot_script &lt;&lt; "boot || goto error\n"
        boot_script &lt;&lt; "\n\n\n"
        boot_script &lt;&lt; ":error\necho ERROR, will reboot in #{@config.mk_checkin_interval}\nsleep #{@config.mk_checkin_interval}\nreboot\n"
        boot_script
end
</code></pre>

<p>下图是Razor Server的日志，可以看到hw_id为043a的节点在通过iPXE发起boot请求后，Server返回了Razor-Microkernl的地址。</p>

<p><img src="/images/my/boot.png"></p>

<p>对于服务器，在收到http应答后会执行脚本到指定地址下载Razor-Microkernel并启动，下图为服务器控制台输出</p>

<p><img src="/images/my/mk.png"></p>

<h3>OS安装过程中</h3>

<p>在iPXE发起boot的http请求时，如果Razor Server发现node已经和policy进行了绑定，则返回http应答中包含的执行脚本会指明OS镜像的路径。
例如，安装Ubuntu时，返回的iPXE脚本如下代码清单所示，此代码清单为Ubuntu ModelTemplate的一部分
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='</p>'><span class='line'>
</span><span class='line'><h1>!ipxe</h1>
</span><span class='line'>
</span><span class='line'><p>echo Razor &lt;%= @label %> model boot_call
</span><span class='line'>echo Installation node UUID : &lt;%= node.uuid %>
</span><span class='line'>echo Installation image UUID: &lt;%= @image_uuid %>
</span><span class='line'>echo Active Model node state: &lt;%= @current_state %></p>
</span><span class='line'>
</span><span class='line'><p>sleep 3
</span><span class='line'>kernel &lt;%= &ldquo;#{image_svc_uri}/#{@image_uuid}/#{kernel_path} #{kernel_args(policy_uuid)}&rdquo; %> || goto error
</span><span class='line'>initrd &lt;%= &ldquo;#{image_svc_uri}/#{@image_uuid}/#{initrd_path}&rdquo; %> || goto error
</span><span class='line'>boot</span></code></pre></td></tr></table></div></figure></p>

<p>如下图所示，iPXE会到指定路径下载Ubuntu安装镜像进行启动</p>

<p><img src="/images/my/os.png"></p>

<h2>OS安装过程详解</h2>

<h3>Razor-Microkernel发现Server方法</h3>

<p>MK在启动时会检测Server的IP地址并主动进行checkin操作，检测方式有两种：</p>

<ol>
<li>在/proc/cmdline 文件中查找razor.ip或razor.server值作为Server的IP地址</li>
<li>使用/etc/resolv.conf中的DNS服务器IP地址作为Server的IP地址</li>
</ol>


<p>具体代码如下
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='</p>'><span class='line'>def discover_rz_server_ip
</span><span class='line'>      discover_by_pxe or discover_by_dns or discover_by_dhcp
</span><span class='line'>end
</span><span class='line'>def discover_by_pxe
</span><span class='line'>      begin
</span><span class='line'>        contents = File.open(&ldquo;/proc/cmdline&rdquo;, &lsquo;r&rsquo;) { |f| f.read }
</span><span class='line'>        server_ip = contents.split.map { |x| $1 if x.match(/razor.ip=(.*)/)}.compact
</span><span class='line'>        if server_ip.size == 1
</span><span class='line'>          return server_ip.join
</span><span class='line'>        else
</span><span class='line'>          return false
</span><span class='line'>        end
</span><span class='line'>      rescue
</span><span class='line'>        return false
</span><span class='line'>      end
</span><span class='line'>end</p>
</span><span class='line'>
</span><span class='line'><p> def discover_by_dns
</span><span class='line'>      begin
</span><span class='line'>        contents = File.open(&ldquo;/proc/cmdline&rdquo;, &lsquo;r&rsquo;) { |f| f.read }
</span><span class='line'>        server_name = contents.split.map { |x| $1 if x.match(/razor.server=(.*)/)}.compact
</span><span class='line'>        server_name = server_name.size == 1 ? server_name.join : &lsquo;razor&rsquo;</p>
</span><span class='line'>
</span><span class='line'><pre><code>    require 'socket'
</span><span class='line'>    return TCPSocket.gethostbyname(server_name)[3..-1].first || false
</span><span class='line'>  rescue
</span><span class='line'>    return false
</span><span class='line'>  end
</span><span class='line'></code></pre>
</span><span class='line'>
</span><span class='line'><p>end
</span><span class='line'>def discover_by_dhcp
</span><span class='line'>      udhcp_file = &ldquo;/tmp/nextServerIP.addr&rdquo;
</span><span class='line'>      begin
</span><span class='line'>        contents = File.open(udhcp_file, &lsquo;r&rsquo;) { |f| f.read }
</span><span class='line'>        return contents.strip
</span><span class='line'>      rescue
</span><span class='line'>        return false
</span><span class='line'>      end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></p>

<h2>Razor的程序结构</h2>

<p>Razor的主要程序结构如下图所示：</p>

<p><img src="/images/my/node_boot.png"></p>

<p>典型流程：</p>

<ul>
<li>node通过REST调用<a href="http://serverIP:8026/razor/api/node/checkin?json_hash=">http://serverIP:8026/razor/api/node/checkin?json_hash=</a>&lsquo;{hw_id=xxxxx,last_state=xxxx}</li>
<li>Node.js服务器解析REST请求，并执行shell命令：razor -w node checkin &lsquo;{hw_id=xxxxx,last_state=xxxx}</li>
<li>slice负责解析此shell命令，并调用相应方法返回应答</li>
</ul>


<h2>Razor中Policy的绑定过程</h2>

<p>先解释一下概念</p>

<ul>
<li>Node：能够被Razor管理到的一台服务器就是一个Node，可以是虚拟化或物理机</li>
<li>Model：Razor中将一种OS类型的安装方式抽象为一个model，比如针对Ubuntu Precise的安装就会有一个precise的model存在，其中详细定义了OS的安装配置、安装过程、安装中的状态变化、安装中Node和Razor的交互、安装后的处理等等。model是和OS类型紧密相关的。</li>
<li>Policy：Razor根据Policy将Node和Model联系在一起。Policy与Model为1对1，与Node为1对N关系。Policy的匹配规则类似防火墙的过滤规则，具有先后优先级。优先级高的Policy会先生效，并将Model和Node绑定。</li>
<li>Active_model：Active_model是一个Policy对象，可以理解为生效的Policy。Razor发现某个Node符合一条Policy规则，则生成一个Policy对象，将状态设定为active，指明绑定的Node。之后OS的安装过程，Node都是根据这个Active_model定义的流程和规则在进行操作。</li>
</ul>


<p><img src="/images/my/node_binding.png"></p>

<p>current_state与返回命令的映射表如下图：</p>

<p><img src="/images/my/state.png"></p>
]]></content>
  </entry>
  
</feed>
