<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Lambda | Darcy Tang's Blog]]></title>
  <link href="http://txworking.github.io/blog/categories/lambda/atom.xml" rel="self"/>
  <link href="http://txworking.github.io/"/>
  <updated>2014-01-03T11:42:36+08:00</updated>
  <id>http://txworking.github.io/</id>
  <author>
    <name><![CDATA[Darcy Tang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Puppet3.2的迭代器]]></title>
    <link href="http://txworking.github.io/blog/2013/07/06/lambda-in-puppet-3-dot-2/"/>
    <updated>2013-07-06T00:29:00+08:00</updated>
    <id>http://txworking.github.io/blog/2013/07/06/lambda-in-puppet-3-dot-2</id>
    <content type="html"><![CDATA[<p>Puppet在最新的3.2版本中实现了lambda风格的迭代器语法，而且支持链式语法。当然要使用的话，需要在puppet.conf中启用parser=future</p>

<p>目前已经实现的有：</p>

<ul>
<li>each/foreach</li>
<li>slice</li>
<li>select</li>
<li>collect</li>
<li>reject</li>
<li>reduce</li>
</ul>


<p>含义和作用域与Ruby中的基本一致，基本用法也一致。
```ruby</p>

<pre><code>$a = [1,2,3]
each($a) |$value| { notice $value } # 迭代数组

[1,20,3].select |$value| {$value &lt; 10 }.each |$value| { notice $value } # 链式语法
</code></pre>

<p><code>
根据[说明](http://docs.puppetlabs.com/puppet/3/reference/lang_experimental_3_2.html#available-functions)，也可以使用多种风格的语法
</code>ruby</p>

<pre><code>each($x)  |$value| { … }
$x.each   |$value| { … }
$x.each() |$value| { … }

slice($x, 2) |$value| { … }
$x.slice(2)  |$value| { … }
</code></pre>

<p><code>
或者
</code>ruby</p>

<pre><code># Alternative 0 (as shown): Parameters are outside the lambda block.
[1,2,3].each |$value| { notice $value }

# Alternative 1: Parameters are inside the lambda block.
[1,2,3].each { |$value| notice $value }

# Alternative 2: A fat arrow is placed after the parameters.
[1,2,3].each |$value| =&gt; { notice $value }
</code></pre>

<p><code>
但是我自己实验，只有
</code>ruby</p>

<pre><code>[1,2,3].each { |$value| notice $value }
</code></pre>

<p>```
的方式成功了。</p>

<p>其实这些函数都是通过添加Puppet自定义函数的形式实现的，lambda表达式作为一个参数进行处理，调一个call就执行了。</p>

<p>比如迭代哈希的关键代码就是这样：
```ruby</p>

<pre><code>  receiver = args[0]
  pblock = args[1]
  foreach_Hash(receiver, self, pblock)
  def foreach_Hash(o, scope, pblock)    
    return nil unless pblock    
    serving_size = pblock.parameter_count    

    enumerator = o.each_pair    

    if serving_size == 1      
      (o.size).times do        
        pblock.call(scope, enumerator.next)      
      end    
    else      
      (o.size).times do   
        pblock.call(scope, *enumerator.next)      
      end    
    end    
    o  
  end
</code></pre>

<p>```
其实还是使用了Ruby中的each_pair这个迭代器。在Puppet中写的lambda表达式还是循环调用，并把each_pair作为每一次的参数传进去用。</p>

<p>感觉Puppet在解释lambda表达式时应该还做了些工作，今天就不研究了。</p>
]]></content>
  </entry>
  
</feed>
