<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Darcy Tang's Blog]]></title>
  <link href="http://txworking.github.io/atom.xml" rel="self"/>
  <link href="http://txworking.github.io/"/>
  <updated>2015-01-14T17:31:55+08:00</updated>
  <id>http://txworking.github.io/</id>
  <author>
    <name><![CDATA[Darcy Tang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Spark对ElasticSearch进行读取]]></title>
    <link href="http://txworking.github.io/blog/2015/01/14/use-spark-with-elasticsearch/"/>
    <updated>2015-01-14T17:22:00+08:00</updated>
    <id>http://txworking.github.io/blog/2015/01/14/use-spark-with-elasticsearch</id>
    <content type="html"><![CDATA[<p>ElasticSearch for Apache Hadoop是ES提供的工具库，让Hadoop、Pig、Hive等可以比较原生的方式去和ES交互。
目前提供了mapreduce、hive、pig、cascading、spark、storm的集成。</p>

<p>下面以Spark为例，演示如何利用这个工具库去读取ES记录</p>

<p><a href="http://www.elasticsearch.org/guide/en/elasticsearch/hadoop/current/spark.html">官方指南</a></p>

<h2>安装</h2>

<p>我使用的是spark-shell交互式环境进行的测试，所以需要手动下载elasticsearch-hadoop的jar包。
在maven项目中可以通过添加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.elasticsearch<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>elasticsearch-hadoop<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>2.1.0.Beta3<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是包含了所有支持的jar包，也可以下载单独的spark支持包。</p>

<p>对于Spark，还需要下载Kryo，来替代Spark自带的序列化包。</p>

<p>最后elasticsearch-hadoop只支持Java 1.7以上版本，所以需要看看Java环境是否匹配。</p>

<p>启动spark-shell时，使用以下命令加载特定jar包</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>./bin/spark-shell -jars ./elasticsearch-hadoop-2.1.0.Beta3.jar;./kryo-3.0.0/jar
</span></code></pre></td></tr></table></div></figure>


<p>指定序列化工具</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>import com.esotericsoftware.kryo.KryoSerializable
</span><span class='line'>import org.apache.spark.SparkConf
</span><span class='line'>
</span><span class='line'>val conf = new SparkConf()
</span><span class='line'>conf.set(&quot;spark.serializer&quot;, classOf[KryoSerializer].getName)
</span></code></pre></td></tr></table></div></figure>


<h2>读取</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>import org.apache.hadoop.conf.Configuration
</span><span class='line'>import org.elasticsearch.hadoop.mr.EsInputFormat
</span><span class='line'>import org.apache.hadoop.io.Text
</span><span class='line'>import org.apache.hadoop.io.MapWritable
</span><span class='line'>
</span><span class='line'>val conf = new Configuration()
</span><span class='line'>conf.set(&quot;es.resource&quot;, &quot;highrisk/blacklist&quot;) //指定读取的索引名称
</span><span class='line'>conf.set(&quot;es.nodes&quot;, &quot;127.0.0.1&quot;)
</span><span class='line'>conf.set(&quot;es.query&quot;, &quot;?q=me*&quot;)  //使用query字符串对结果进行过滤
</span><span class='line'>val esRDD = sc.newHadoopRDD(conf, classOf[EsInputFormat[Text, MapWritable]],
</span><span class='line'>                                  classOf[Text], classOf[MapWritable]))
</span><span class='line'>val docCount = esRDD.count();
</span></code></pre></td></tr></table></div></figure>


<p>读取出来的记录为key-value形式，key为Text类型，value为MapWritable类型。
接下来就可以利用Spark对esRDD进行各种map、flatmap、reduceByKey的操作了。</p>

<h2>写入</h2>

<p>参考<a href="http://chenlinux.com/2014/09/04/spark-to-elasticsearch/">用Spark处理数据导入ElasticSearch</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>import org.apache.spark.SparkConf
</span><span class='line'>import org.elasticsearch.spark._
</span><span class='line'>
</span><span class='line'>val conf = new SparkConf()
</span><span class='line'>conf.set(&quot;es.index.auto.create&quot;, &quot;true&quot;)
</span><span class='line'>conf.set(&quot;es.nodes&quot;, &quot;127.0.0.1&quot;)
</span><span class='line'>
</span><span class='line'>val numbers = Map(&quot;one&quot; -&gt; 1, &quot;two&quot; -&gt; 2, &quot;three&quot; -&gt; 3)
</span><span class='line'>val airports = Map(&quot;OTP&quot; -&gt; &quot;Otopeni&quot;, &quot;SFO&quot; -&gt; &quot;San Fran&quot;)
</span><span class='line'>sc.makeRDD(Seq(numbers, airports)).saveToEs(&quot;spark/docs&quot;)
</span></code></pre></td></tr></table></div></figure>


<p>目前elasticsearch-hadoop对Spark的支持还比较简单，想要对记录进行过滤就只有通过query字符串或者全部读取后在Spark中过滤，对规模比较大的索引或者复杂的过滤查询不友好。</p>

<h2>配置</h2>

<p>主要的配置
* es.resource
* es.resource.read    默认与es.resource相同
* es.resource.write   默认与es.resource相同
* es.nodes 默认为localhost
* es.port  默认为9200
* es.query 默认为none</p>

<p>完整的请查看<a href="http://www.elasticsearch.org/guide/en/elasticsearch/hadoop/current/configuration.html">Configuration</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS+SpringMVC构建应用]]></title>
    <link href="http://txworking.github.io/blog/2014/01/02/angular-plus-springmvc/"/>
    <updated>2014-01-02T13:33:00+08:00</updated>
    <id>http://txworking.github.io/blog/2014/01/02/angular-plus-springmvc</id>
    <content type="html"><![CDATA[<p>利用AngularJS和SpringMVC搭建一个简单的应用，AngularJS负责前端，SpringMVC作为后端提供REST API。</p>

<h2>SpringMVC的使用</h2>

<p>SpringMVC中可以很方便的使用<code>@RequestMapping</code>注解提供REST API。</p>

<p>最基本的使用代码如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Controller
</span><span class='line'>@RequestMapping(value = "/hello")
</span><span class='line'>public class MyController {
</span><span class='line'>
</span><span class='line'>  @RequestMapping(method=RequestMethod.GET)
</span><span class='line'>  @ResponseBody
</span><span class='line'>  public String getRoot(){
</span><span class='line'>
</span><span class='line'>    return "Hello World";
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @RequestMapping(value="/{path}", method=RequestMethod.GET)
</span><span class='line'>  @ResponseBody
</span><span class='line'>  public String getValue(@PathVariable String path){
</span><span class='line'>    return "Path is " + path;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>使用<code>@Controller</code>注解指定当前类为SpringMVC的一个controller，使用<code>@RequestMapping</code>表明此controller会处理所有以<code>/hello</code>开头的URL。</p>

<p><code>@RequestMapping</code>最常用的两个参数就是<code>value</code>和<code>method</code>，分别指定了拦截的URL和请求方法。</p>

<p>MyController类中的两个方法还可以分别再使用<code>@RequestMapping(value)</code>再继续指定处理以hello为前缀的URL。例如<code>@RequestMapping(value="/{path}")</code>，可处理类似<code>/hello/path</code>的URL，并结合<code>@PathVariable</code>将path作为URL参数获取。</p>

<p>这个小Demo只是将SpringMVC作为后台REST API的提供方，也就是说只使用了MVC中的Controller和Model，View就交给AngularJS，所以使用<code>@ResponseBody</code>直接将方法返回值作为响应，不经过View的渲染啥的。</p>

<h2>简单的AngularJS应用</h2>

<p><a href="http://angularjs.org">AngularJS</a>是Google推出的前端MVC框架，也有完整的Controller、View、Model等概念，而且上手非常简单，熟悉几个html标签就能开始使用了。</p>

<p>建立AngularJS项目可以从GitHub上clone <a href="https://github.com/angular/angular-seed">angular-seed</a>。</p>

<p>核心的代码都在app目录中，其典型结构如下：</p>

<ul>
<li><code>css</code> 存放css文件</li>
<li><code>img</code> 存放图片</li>
<li><code>js</code> 存放js代码，我们自己的代码基本都在这儿，一般按照功能和层次划分为这样几个文件：app.js, controller.js, services.js, filters.js, directives.js, animations.js。从名字就可以看出分别是在对这些概念进行定义和使用</li>
<li><code>lib</code> 存放js库</li>
<li><code>partials</code> 存放html模板，angularjs发送到客户端的就是这些html模板</li>
</ul>


<h3>基本概念</h3>

<p>demo中涉及的几个概念：</p>

<ul>
<li>app</li>
<li>controller</li>
<li>service</li>
<li>router</li>
<li>resource</li>
<li>view</li>
<li>scope</li>
</ul>


<p>demo的基本功能就是在html模板中新建一个app和两个controller，然后自定义一个service使用REST API和SpringMVC后端交互操作hello这个resource，在controller中调用此service，html模板间的跳转通过router定义。</p>

<p><img src="http://docs.angularjs.org/img/guide/concepts-module-service.png" alt="Alt text" /></p>

<p>借用AngularJS官方的一张图来说明下关系：</p>

<p>在template中声明app，app包含controller，controller调用service，service操作resource。</p>

<p>层次和调用关系还是很清晰的，和Spring也差不多。</p>

<p>template、app、service、controller的具体代码如下</p>

<h4>template</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!doctype html&gt;
</span><span class='line'>&lt;html lang="en" ng-app="myApp"&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>  &lt;div ng-view&gt;&lt;/div&gt;
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;
</span></code></pre></td></tr></table></div></figure>


<h4>app</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'use strict';
</span><span class='line'>
</span><span class='line'>// 新建myApp，并声明会使用ngRoute、myApp.services、myApp.controllers三个module
</span><span class='line'>// AngularJS会实现module的自动注入
</span><span class='line'>angular.module('myApp', [
</span><span class='line'>  'ngRoute',
</span><span class='line'>  'myApp.services',
</span><span class='line'>  'myApp.controllers'
</span><span class='line'>]).
</span><span class='line'>config(['$routeProvider', function($routeProvider) { // 配置app对应的URL路由，请求此URL时返回的view template和template对应的controller
</span><span class='line'>  $routeProvider.when('/hello', {templateUrl: 'partials/list.html', controller: 'ListCtrl'});
</span><span class='line'>  $routeProvider.when('/hello/:path', {templateUrl: 'partials/detail.html', controller: 'DetailCtrl'});
</span><span class='line'>  $routeProvider.otherwise({redirectTo: '/hello'});
</span><span class='line'>}]);
</span></code></pre></td></tr></table></div></figure>


<h4>service</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'use strict';
</span><span class='line'>
</span><span class='line'>// 新建myService，并声明会使用ngResource这个module
</span><span class='line'>var myService = angular.module('myApp.services', ['ngResource']).
</span><span class='line'>  value('version', '0.1');
</span><span class='line'>// 新建Hello这个资源，并指定资源的访问路径和访问方法
</span><span class='line'>myService.factory('Hello', ['$resource',
</span><span class='line'>  function($resource){
</span><span class='line'>    return $resource('api/hello/:path', {}, {
</span><span class='line'>      list: {method:'GET', isArray:true}
</span><span class='line'>    });
</span><span class='line'>  }]);
</span></code></pre></td></tr></table></div></figure>


<h4>controller</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'use strict';
</span><span class='line'>
</span><span class='line'>// 新建ListCtrl和DetailCtrl两个controller
</span><span class='line'>angular.module('myApp.controllers', []).
</span><span class='line'>  controller('ListCtrl', ['$scope', 'Hello', // 声明要使用Hello
</span><span class='line'>   function($scope, Hello) {
</span><span class='line'>    $scope.hello = Hello.list();             // 调用Hello服务的list方法，赋值给模板中的hello元素
</span><span class='line'>  }])
</span><span class='line'>  .controller('DetailCtrl', ['$scope', '$routeParams', 'Hello',
</span><span class='line'>   function($scope, $routeParams, Hello) {
</span><span class='line'>    $scope.hello = Hello.get({path:$routeParams.path}, function(hello){
</span><span class='line'>      $scope.detail = hello.detail;
</span><span class='line'>    });
</span><span class='line'>  }]);
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div class="container-fluid"&gt;
</span><span class='line'>  &lt;div class="row-fluid"&gt;
</span><span class='line'>    &lt;div class="span10"&gt;
</span><span class='line'>      &lt;!--Body content--&gt;
</span><span class='line'>          &lt;p&gt;&lt;/p&gt;
</span><span class='line'>    &lt;/div&gt;
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'>&lt;/div&gt;</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby和Ruby2.0相关文章汇总]]></title>
    <link href="http://txworking.github.io/blog/2013/12/02/ruby2-dot-0/"/>
    <updated>2013-12-02T11:31:00+08:00</updated>
    <id>http://txworking.github.io/blog/2013/12/02/ruby2-dot-0</id>
    <content type="html"><![CDATA[<p>记录一些Ruby和Ruby2.0的文章</p>

<h2>Ruby2.0相关</h2>

<ul>
<li><a href="http://rkh.im/ruby-2.1">Ruby2.1</a></li>
<li><a href="http://www.jstorimer.com/blogs/workingwithcode/8085491-nobody-understands-the-gil?utm_source=rubyweekly&amp;utm_medium=email">Ruby 2.0 by example</a></li>
<li><a href="http://crypt.codemancers.com/posts/2013-04-16-profile-ruby-apps-dtrace-part1/?utm_source=rubyweekly&amp;utm_medium=email">Profile Ruby 2.0 apps using DTrace &ndash; Part 1</a></li>
<li><a href="https://speakerdeck.com/shyouhei/whats-new-in-ruby-2-dot-0?utm_source=rubyweekly&amp;utm_medium=email">What&rsquo;s new in Ruby 2.0</a></li>
<li><a href="http://globaldev.co.uk/2013/03/ruby-2-0-0-in-detail/">Ruby 2.0 in details</a></li>
<li><a href="http://whitequark.org/blog/2013/04/14/unmentioned-features-of-ruby-2-dot-0/?utm_source=rubyweekly&amp;utm_medium=email">Unmentioned Features of Ruby 2.0</a></li>
<li><a href="http://tech.pro/tutorial/1149/understanding-method-lookup-in-ruby-20">Understand method lookup in Ruby 2.0</a> <a href="http://www.oschina.net/translate/understanding-method-lookup-in-ruby-20">译文</a></li>
<li><a href="http://www.confreaks.com/videos/1272-rubyconf2012-implementation-details-of-ruby-2-0-vm">Implementation Details of Ruby2.0 VM</a></li>
</ul>


<h2>Ruby相关</h2>

<ul>
<li><a href="http://www.jstorimer.com/blogs/workingwithcode/8085491-nobody-understands-the-gil?utm_source=rubyweekly&amp;utm_medium=email">Nobody understands the GIL</a></li>
<li><a href="http://www.sitepoint.com/series/comparing-ruby-background-processing-libraries/">Comparing Ruby Background Processing Libraries/</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-rubysbl/">理解Ruby Symbol</a></li>
<li><a href="http://patshaughnessy.net/2012/6/29/how-ruby-executes-your-code">How Ruby Executy Your Code</a></li>
<li><a href="http://globaldev.co.uk/2013/09/ruby-tips-part-1/">Ruby Tips Part 1</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Nagios中实时监控日志]]></title>
    <link href="http://txworking.github.io/blog/2013/08/17/check-logfiles/"/>
    <updated>2013-08-17T17:30:00+08:00</updated>
    <id>http://txworking.github.io/blog/2013/08/17/check-logfiles</id>
    <content type="html"><![CDATA[<p>最近需要利用Nagios对Linux和Windows上的某个日志文件进行实时的监控，虽然这个活由Nagios来做不太合适，但最后
还是记录一下找到的解决方案。</p>

<h2>Windows</h2>

<p>在Windows系统上使用NSClient++自带了对系统日志和日志文件的实时监控功能，只需要简单的配置下就可以使用了。当然还需要在服务器
上运行NSCA服务才能接收客户端主动推送的数据。</p>

<p>以下为开启对Windows系统日志监控的客户端配置，更详细配置可以参考<a href="http://blog.medin.name/blog/2012/03/20/real-time-event-log-monitoring-with-nsclient/">Real time event-log monitoring with NSClient++</a>和NSClient++的<a href="http://www.nsclient.org">文档</a></p>

<pre><code>[/modules]
CheckLogFile = enabled
CheckEventLog = enabled

[/settings/NSCA/client]
hostname=&lt;nagios_hostname&gt; # 需要和服务器端设定的nagios host一致

[/settings/NSCA/client/targets/default]
address=168.1.194.1  
password=nagios   # password和encryption配置需要和服务器端的nsca配置一致
encryption=1

[/settings/eventlog/real-time]
enabled = true

[/settings/eventlog/real-time/filters/run_log]  # run_log为nagios service名称
filter=type in ( 'warning', 'error') AND source = 'Puppet' 
target=NSCA
severity=OK
syntax=%type%: %strings%
</code></pre>

<h2>Linux</h2>

<h3>配合incron</h3>

<p>在nagios exchange里找到了<a href="labs.consol.de/nagios/check_logfiles/">check_logfiles</a>这个插件，配合<a href="http://inotify.aiken.cz/?section=incron&amp;page=about&amp;lang=en">incron</a>就可以实现实时的日志监控了。</p>

<p>incron是类似cron的工具，cron是基于时间，incron则是基于文件事件，底层使用了inotify系统调用。</p>

<p>以下是check_logfiles的配置文件，主要功能就在<code>supersmartscript</code>，意思就是在每找到一行新的日志信息时执行script指定的perl脚本。
类似的配置有<code>supersmartpostscript</code>，在一次检查完后执行perl脚本。
在脚本中也支持部分变量的调用，在$MACROS中定义即可在script中使用。
在这段配置里script部分调用系统命令，执行<code>send_nsca</code>发送监控信息到服务器。</p>

<pre><code>$scriptpath = '/usr/bin/nagios/libexec:/usr/local/nagios/bin';
$MACROS = {
    CL_NAGIOS_HOST_ADDRESS =&gt; '%server_ip%',
    CL_NSCA_HOSTNAME =&gt; '%node_name%',
    CL_NSCA_PORT =&gt; 5667,
    CL_NSCA_CONFIG_FILE =&gt; '%send_nsca.cfg%'
};
@searches = (
  {
    options =&gt; 'supersmartscript,noprotocol',
    tag =&gt; 'puppet',
    logfile =&gt; '%puppet_run_log%',
    criticalpatterns =&gt; [
      'Tongtech',
      'err'
    ],
    script =&gt; sub {
      (my $line = "$ENV{CHECK_LOGFILES_NSCA_HOSTNAME}\t$ENV{CHECK_LOGFILES_SERVICEDESC}\t$ENV{CHECK_LOGFILES_SERVICESTATEID}\t$ENV{CHECK_LOGFILES_SERVICEOUTPUT}");
      #system("echo '$line'");
      system("echo '$line'|%send_nsca% -H $ENV{CHECK_LOGFILES_NAGIOS_HOST_ADDRESS} -c $ENV{CHECK_LOGFILES_NSCA_CONFIG_FILE} " );
    }
  },
);
</code></pre>

<p>按照常规的<code>./configure &amp;&amp; make &amp;&amp; make install</code>安装好incron，使用incrontab -e 命令编辑，基本的格式为</p>

<pre><code>&lt;path-to-puppet_log&gt; MODIFY &lt;path-to-check_logfiles&gt; -f &lt;配置文件路径&gt; --rununique
# &lt;path&gt; &lt;mask&gt; &lt;command&gt;
# path - 监控的文件
# mask - 监控的文件事件，MODIFY表示文件有改变
# command - 监控到指定文件的指定事件后执行的命令
</code></pre>

<p>具体的使用可以参考此文章<a href="http://wlx.westgis.ac.cn/879/">incron的使用</a></p>

<p>这样利用incron监控puppet的日志文件，当文件有改变时执行check_logfiles检查，就会发送日志信息到服务器。
注意&mdash;rununique选项，如果不加此选项，文件改变可能会触发多次检查，check_logfiles就会发送重复的信息。</p>

<h3>只使用check_logfiles</h3>

<p>check_logfiles支持以daemon方式运行，所以可以指定较短的检查周期，实现实时发送。</p>

<p>之前的check_logfiles配置不变，只是不使用incron执行命令，直接在shell中执行</p>

<pre><code>&lt;path-to-check_logfiles&gt; -f &lt;配置文件路径&gt; --rununique --daemon 1
</code></pre>

<p>check_logfiles就会变成守护进程，每隔一秒检查一次日志文件，如果有新的日志写入，就发送到服务器。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facter在Windows上的一个小问题]]></title>
    <link href="http://txworking.github.io/blog/2013/07/08/a-bug-of-facter/"/>
    <updated>2013-07-08T23:37:00+08:00</updated>
    <id>http://txworking.github.io/blog/2013/07/08/a-bug-of-facter</id>
    <content type="html"><![CDATA[<p>最近在Windows上使用Puppet，总是遇到一个诡异的问题：在某些机器上无法获得ipaddress这个fact，直接使用facter命令行也不行，而且显得完全没有规律。</p>

<p>具体情况是：</p>

<ul>
<li>facter 在所有机器上可以获得ipaddress</li>
<li>facter &mdash;puppet 在部分机器上出现 <strong>invalid address</strong> 错误</li>
</ul>


<p><strong>ipaddress</strong>这个fact是在facter/lib/facter/ipaddress.rb添加进来的。关键代码是:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Facter</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:ipaddress</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="err">  </span><span class="n">confine</span> <span class="ss">:kernel</span> <span class="o">=&gt;</span> <span class="sx">%w{windows}</span>
</span><span class='line'><span class="err">  </span><span class="n">setcode</span> <span class="k">do</span>
</span><span class='line'><span class="err">    </span><span class="nb">require</span> <span class="s1">&#39;socket&#39;</span>
</span><span class='line'><span class="err">    </span><span class="no">IPSocket</span><span class="o">.</span><span class="n">getaddress</span><span class="p">(</span><span class="no">Socket</span><span class="o">.</span><span class="n">gethostname</span><span class="p">)</span>
</span><span class='line'><span class="err">  </span><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>发现是<strong>IPSocket.getaddress</strong>函数不起作用，于是又把问题定位在Puppet自带的Ruby环境中的<strong>ipaddr.rb</strong>中，发现以下代码在某些机器上无法获得IP。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">alias</span> <span class="n">getaddress_orig</span> <span class="n">getaddress</span>
</span><span class='line'><span class="k">def</span> <span class="nf">getaddress</span> <span class="n">s</span><span class="err">   </span>
</span><span class='line'>  <span class="k">if</span> <span class="n">valid?</span> <span class="n">s</span>
</span><span class='line'>  <span class="err"> </span> <span class="n">s</span><span class="err">   </span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="err"> </span> <span class="n">getaddress_orig</span> <span class="n">s</span><span class="err">   </span>
</span><span class='line'>  <span class="k">end</span><span class="err"> </span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>一开始没发现哪有问题，后来仔细看了下<strong>valid</strong>中的正则表达式，发现不允许<strong>hostname</strong>中出现<strong>下划线</strong>。</p>

<p>之前一直没注意过这问题，所以测试主机的hostname都是随意命名的，所以才会出现部分主机可以通过验证，部分不行的情况。</p>

<p>不过也是现在才知道原来主机名规范有一条是不能带下划线。</p>

<p>Windows命名的时候完全没这个限制，但是在Ubuntu里使用<strong>hostname</strong>命令修改时，如果带下划线会直接提示错误。</p>

<p>很奇怪自己以前在Ubuntu上怎么没遇到过这个错误，难道就鬼使神差的从没使用过带下划线的主机名？</p>

<p>但是现在问题又来了，为什么facter都可以，facter &mdash;puppet就不行呢？</p>

<p>于是又研究了一遍facter的加载机制，在facter取值的部分折腾好久，最后发现和这部分没关系。是因为执行facter时没有加载<strong>facter/lib/facter/ipaddr.rb</strong>，ipaddr.rb中对<strong>IPSocket#getaddress</strong>的重写未生效，直接使用了Puppet自带Ruby中的socket.so中定义的<strong>IPSocket#getaddress</strong>，这个函数定义里面就没有对主机名的正则验证。</p>

<p>想来Puppet也是为了做多平台支持，所以加了一个MonkeyPatch，对主机名做了验证。</p>

<p>现在又绕回来了，&mdash;puppet 到底干了啥？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err"> </span><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">load_puppet</span>
</span><span class='line'><span class="err">      </span><span class="nb">require</span> <span class="s1">&#39;puppet&#39;</span>
</span><span class='line'><span class="err">      </span><span class="no">Puppet</span><span class="o">.</span><span class="n">parse_config</span>
</span><span class='line'>
</span><span class='line'><span class="err">      </span><span class="c1"># If you&#39;ve set &#39;vardir&#39; but not &#39;libdir&#39; in your</span>
</span><span class='line'><span class="err">      </span><span class="c1"># puppet.conf, then the hook to add libdir to $:</span>
</span><span class='line'><span class="err">      </span><span class="c1"># won&#39;t get triggered.  This makes sure that it&#39;s setup</span>
</span><span class='line'><span class="err">      </span><span class="c1"># correctly.</span>
</span><span class='line'><span class="err">      </span><span class="k">unless</span> <span class="vg">$LOAD_PATH</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="no">Puppet</span><span class="o">[</span><span class="ss">:libdir</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="err">        </span><span class="vg">$LOAD_PATH</span> <span class="o">&lt;&lt;</span> <span class="no">Puppet</span><span class="o">[</span><span class="ss">:libdir</span><span class="o">]</span>
</span><span class='line'><span class="err">      </span><span class="k">end</span>
</span><span class='line'><span class="err">    </span><span class="k">rescue</span> <span class="no">LoadError</span> <span class="o">=&gt;</span> <span class="n">detail</span>
</span><span class='line'><span class="err">      </span><span class="vg">$stderr</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Could not load Puppet: </span><span class="si">#{</span><span class="n">detail</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>根据代码来看，只是把Puppet的<strong>libdir</strong>加入了<strong>\$LOAD_PATH</strong>。</p>

<p>这个libdir里面都是些自定义的facter、tyep和provider，似乎和ipaddr.rb完全没关系。</p>

<p>又卡在这儿想了半天，才发现思路错了。</p>

<p>ipaddr.rb虽然在lib目录下，但是不会自动加载，需要显式<strong>require</strong>。</p>

<p>于是注释掉</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;puppet&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用facter &mdash;puppet也就和正常一样了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puppet3.2的迭代器]]></title>
    <link href="http://txworking.github.io/blog/2013/07/06/lambda-in-puppet-3-dot-2/"/>
    <updated>2013-07-06T00:29:00+08:00</updated>
    <id>http://txworking.github.io/blog/2013/07/06/lambda-in-puppet-3-dot-2</id>
    <content type="html"><![CDATA[<p>Puppet在最新的3.2版本中实现了lambda风格的迭代器语法，而且支持链式语法。当然要使用的话，需要在puppet.conf中启用parser=future</p>

<p>目前已经实现的有：</p>

<ul>
<li>each/foreach</li>
<li>slice</li>
<li>select</li>
<li>collect</li>
<li>reject</li>
<li>reduce</li>
</ul>


<p>含义和作用域与Ruby中的基本一致，基本用法也一致。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">each</span><span class="p">(</span><span class="vg">$a</span><span class="p">)</span> <span class="o">|</span><span class="vg">$value</span><span class="o">|</span> <span class="p">{</span> <span class="n">notice</span> <span class="vg">$value</span> <span class="p">}</span> <span class="c1"># 迭代数组</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">select</span> <span class="o">|</span><span class="vg">$value</span><span class="o">|</span> <span class="p">{</span><span class="vg">$value</span> <span class="o">&lt;</span> <span class="mi">10</span> <span class="p">}</span><span class="o">.</span><span class="n">each</span> <span class="o">|</span><span class="vg">$value</span><span class="o">|</span> <span class="p">{</span> <span class="n">notice</span> <span class="vg">$value</span> <span class="p">}</span> <span class="c1"># 链式语法</span>
</span></code></pre></td></tr></table></div></figure>


<p>根据<a href="http://docs.puppetlabs.com/puppet/3/reference/lang_experimental_3_2.html#available-functions">说明</a>，也可以使用多种风格的语法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">each</span><span class="p">(</span><span class="vg">$x</span><span class="p">)</span>  <span class="o">|</span><span class="vg">$value</span><span class="o">|</span> <span class="p">{</span> <span class="err">…</span> <span class="p">}</span>
</span><span class='line'><span class="vg">$x</span><span class="o">.</span><span class="n">each</span>   <span class="o">|</span><span class="vg">$value</span><span class="o">|</span> <span class="p">{</span> <span class="err">…</span> <span class="p">}</span>
</span><span class='line'><span class="vg">$x</span><span class="o">.</span><span class="n">each</span><span class="p">()</span> <span class="o">|</span><span class="vg">$value</span><span class="o">|</span> <span class="p">{</span> <span class="err">…</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">slice</span><span class="p">(</span><span class="vg">$x</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">|</span><span class="vg">$value</span><span class="o">|</span> <span class="p">{</span> <span class="err">…</span> <span class="p">}</span>
</span><span class='line'><span class="vg">$x</span><span class="o">.</span><span class="n">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>  <span class="o">|</span><span class="vg">$value</span><span class="o">|</span> <span class="p">{</span> <span class="err">…</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Alternative 0 (as shown): Parameters are outside the lambda block.</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each</span> <span class="o">|</span><span class="vg">$value</span><span class="o">|</span> <span class="p">{</span> <span class="n">notice</span> <span class="vg">$value</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Alternative 1: Parameters are inside the lambda block.</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="vg">$value</span><span class="o">|</span> <span class="n">notice</span> <span class="vg">$value</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Alternative 2: A fat arrow is placed after the parameters.</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each</span> <span class="o">|</span><span class="vg">$value</span><span class="o">|</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">notice</span> <span class="vg">$value</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是我自己实验，只有</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="vg">$value</span><span class="o">|</span> <span class="n">notice</span> <span class="vg">$value</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>的方式成功了。</p>

<p>其实这些函数都是通过添加Puppet自定义函数的形式实现的，lambda表达式作为一个参数进行处理，调一个call就执行了。</p>

<p>比如迭代哈希的关键代码就是这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">receiver</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>  <span class="n">pblock</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="n">foreach_Hash</span><span class="p">(</span><span class="n">receiver</span><span class="p">,</span> <span class="nb">self</span><span class="p">,</span> <span class="n">pblock</span><span class="p">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foreach_Hash</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">scope</span><span class="p">,</span> <span class="n">pblock</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">nil</span> <span class="k">unless</span> <span class="n">pblock</span>
</span><span class='line'>      <span class="n">serving_size</span> <span class="o">=</span> <span class="n">pblock</span><span class="o">.</span><span class="n">parameter_count</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">enumerator</span> <span class="o">=</span> <span class="n">o</span><span class="o">.</span><span class="n">each_pair</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">serving_size</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>        <span class="p">(</span><span class="n">o</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">pblock</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">scope</span><span class="p">,</span> <span class="n">enumerator</span><span class="o">.</span><span class="n">next</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="p">(</span><span class="n">o</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">pblock</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">scope</span><span class="p">,</span> <span class="o">*</span><span class="n">enumerator</span><span class="o">.</span><span class="n">next</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">o</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实还是使用了Ruby中的each_pair这个迭代器。在Puppet中写的lambda表达式还是循环调用，并把each_pair作为每一次的参数传进去用。</p>

<p>感觉Puppet在解释lambda表达式时应该还做了些工作，今天就不研究了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Puppet中使用Hiera]]></title>
    <link href="http://txworking.github.io/blog/2013/07/04/use-hiera-in-puppet/"/>
    <updated>2013-07-04T23:38:00+08:00</updated>
    <id>http://txworking.github.io/blog/2013/07/04/use-hiera-in-puppet</id>
    <content type="html"><![CDATA[<p>Puppet3.x开始Hiera成为了必需的组件，实现类似ENC的功能，正好现在试试效果。</p>

<p>使用Hiera可以用更格式化的组织节点的定义，而且支持动态的查找加载。</p>

<p>以前在puppetmaster运行过程中加入pp文件，puppet是不会发现并加载此文件的。</p>

<h2>使用</h2>

<p>Puppet3.x自带了Hiera，默认的hiera配置路径是<code>/etc/puppet/hiera.yaml</code>，所以只需要新建此文件，即启用了Hiera。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># hiera.yaml的例子</span>
</span><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">:backends</span><span class="p-Indicator">:</span> <span class="c1"># 搜索yaml和json格式的文件</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">yaml</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">json</span>
</span><span class='line'><span class="l-Scalar-Plain">:yaml</span><span class="p-Indicator">:</span>  <span class="c1"># hiera数据文件的目录</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:datadir</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/etc/puppet/hieradata</span>
</span><span class='line'><span class="l-Scalar-Plain">:json</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:datadir</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/etc/puppet/hieradata</span>
</span><span class='line'><span class="l-Scalar-Plain">:hierarchy</span><span class="p-Indicator">:</span>  <span class="c1"># 在指定目录搜索以下名称的文件</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;%{::clientcert}&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;%{::custom_location}&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">common</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hiera能实现动态加载的主要点就在<code>:hierarchy</code>的配置，此配置项指定Hiera需要读取的数据文件名称，<code>%{::clientcert}</code>表示使用以节点的certname来查找。</p>

<p>比如<code>certname=node1</code>的节点在运行<code>puppet agent --test</code>时，puppetmaster就会去读取<code>node1.yaml</code>和<code>node1.json</code>两个文件。具体可用的变量可以<a href="http://docs.puppetlabs.com/hiera/1/variables.html">在此</a>查看。</p>

<h2>Hiera数据</h2>

<p>具体的Hiera数据可以使用yaml、json、puppet三种格式，puppet格式的目前没有详细文档说明。</p>

<p>这里以yaml格式的为例说明，json格式也差不多，就是会多很多&#8221;&ldquo;。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># node1.yaml</span>
</span><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">string</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">str</span>
</span><span class='line'><span class="l-Scalar-Plain">array</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">  - 1</span>
</span><span class='line'><span class="l-Scalar-Plain">  - 2</span>
</span><span class='line'><span class="l-Scalar-Plain">  - 3</span>
</span><span class='line'><span class="l-Scalar-Plain">hash</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">   key</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">value</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以自己写一个module，其中的init.pp可以这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># init.pp</span>
</span><span class='line'><span class="l-Scalar-Plain">class my_mod(</span>
</span><span class='line'><span class="l-Scalar-Plain">  $string = hiera(&quot;string&quot;),</span>
</span><span class='line'><span class="l-Scalar-Plain">  $array = hiera_array(&quot;array&quot;),</span>
</span><span class='line'><span class="l-Scalar-Plain">  $hash = hiera_hash(&quot;hash&quot;)</span>
</span><span class='line'><span class="l-Scalar-Plain">) {</span>
</span><span class='line'><span class="l-Scalar-Plain">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在<code>site.pp</code>中给node1加上这个class，node1在获取catalog时就会自动的从<code>node1.yaml</code>中加载数据并赋值给<code>$string, $array, $hash</code>三个变量。<code>hiera(), hiera_array(), hiera_hash()</code>是Hiera专门用来搜索数据的函数。</p>

<p>Hiera也支持<strong>自动赋值</strong>，如果你的node1.yaml文件是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># node1.yaml</span>
</span><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">my_mod::string</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">str</span>
</span><span class='line'><span class="l-Scalar-Plain">my_mod::array</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">  - 1</span>
</span><span class='line'><span class="l-Scalar-Plain">  - 2</span>
</span><span class='line'><span class="l-Scalar-Plain">  - 3</span>
</span><span class='line'><span class="l-Scalar-Plain">my_mod::hash</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">   key</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">value</span>
</span></code></pre></td></tr></table></div></figure>


<p>那在my_mod的参数中就不需要再使用函数查找，Hiera会自动关联赋值。</p>

<h2>在Hiera中指定Classes</h2>

<p>如果想完全抛弃<code>site.pp</code>怎么办？用Hiera也可以办到。</p>

<p>只需要在<code>site.pp</code>中加上一句<code>hiera_include("classes")</code>，</p>

<p>在node1.yaml中再添加上classes。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># node1.yaml</span>
</span><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">classes</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">my_mod</span>
</span><span class='line'><span class="l-Scalar-Plain">my_mod::string</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">str</span>
</span><span class='line'><span class="l-Scalar-Plain">my_mod::array</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">  - 1</span>
</span><span class='line'><span class="l-Scalar-Plain">  - 2</span>
</span><span class='line'><span class="l-Scalar-Plain">  - 3</span>
</span><span class='line'><span class="l-Scalar-Plain">my_mod::hash</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">   key</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">value</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么以后节点的classes定义就可以完全通过</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Git Submodule]]></title>
    <link href="http://txworking.github.io/blog/2013/06/08/use-git-submodule/"/>
    <updated>2013-06-08T17:12:00+08:00</updated>
    <id>http://txworking.github.io/blog/2013/06/08/use-git-submodule</id>
    <content type="html"><![CDATA[<p>最近clone的项目里面发现使用了Git的Submodule功能，所以在这儿记录一下基本的使用方法</p>

<h3>添加submodule</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git submodule add git@github.com:xxx/submoule.git src/submodule
</span></code></pre></td></tr></table></div></figure>


<p>在项目中就会自动生成一个.gitmodules文件来保存submodule的关系，再提交到远程库就ok了</p>

<h3>clone项目</h3>

<p>在clone带有submodule的项目，直接使用<code>--recursive</code>就可以递归地将所有submodule，包括submodule中的submodule都一次性clone到本地</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone --recursive git@github.com:xxx/xxx.git
</span></code></pre></td></tr></table></div></figure>


<p>不然就得使用如下的命令组合来完成初次clone，这样还不能clone到submodule中的submodule</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone git@github.com:xxx/xxx.git
</span><span class='line'>git submodule init    <span class="c"># 将.gitmodules中的内容注册到.git/config中</span>
</span><span class='line'>git submodule update  <span class="c"># clone submodule并且checkout指定commit</span>
</span></code></pre></td></tr></table></div></figure>


<h3>更新项目</h3>

<p>如果你不会到submodule中进行开发，那么每次submodule有了更新只需要再update一次就行了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git pull origin master
</span><span class='line'>git submodule update --recursive <span class="c"># 必须在项目顶层目录执行此命令，也可以添加--init保证init执行</span>
</span></code></pre></td></tr></table></div></figure>


<h3>更新submodule</h3>

<p>submodule其实也就是一个单独的Git repo，只是会在项目顶层目录的.gitmodules目录中记录下路径和submodule源的映射关系</p>

<pre><code># .gitmodules的内容
[submodule "src/cloud_controller_ng"]
    path = src/cloud_controller_ng
    url = https://github.com/cloudfoundry/cloud_controller_ng.git
</code></pre>

<p>但是这个文件中并没有指定submodule的commit id，git怎么知道该用submodule的哪个commit呢？</p>

<p>在顶层项目的<code>.git/modules</code>里会保存submodule的git配置，同时也就知道了使用的是submodule的哪个commit
而submodule的.git则只是记录了一下路径</p>

<pre><code># submodule目录中的.git的内容
gitdir: ../.git/modules/dea
</code></pre>

<p>所以在submodule中进行commit或者push就和普通repo完全一样，只是最后需要在外层repo中更新一下</p>

<p>现在假设已经在submodule目录或者单独的submodule项目目录中完成了<code>add</code>、<code>commit</code>和<code>push</code>操作，或者执行了<code>git pull</code>获取了新的源码
这时需要回到外层项目，再次更新一遍</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git status  <span class="c"># 会提示submodule有new commit</span>
</span><span class='line'>git add .   <span class="c"># 添加更改</span>
</span><span class='line'>git commit -m <span class="s2">&quot;update submoule&quot;</span>
</span><span class='line'>git push
</span></code></pre></td></tr></table></div></figure>


<p>在另一个项目repo中执行以下命令，就可以将submodule的commit同步了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git pull
</span><span class='line'>git submodule update --recursive  <span class="c"># 可以加上--init</span>
</span></code></pre></td></tr></table></div></figure>


<h3>其他</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git submoule foreach <span class="s1">&#39;echo $path `git rev-parse HEAD`&#39;</span>  <span class="c"># foreach 可以对每个submodule执行shell命令</span>
</span><span class='line'>
</span><span class='line'>git <span class="nb">help </span>submodule   <span class="c"># git帮助文档</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用awk比较文件]]></title>
    <link href="http://txworking.github.io/blog/2013/05/11/use-awk-to-diff-file/"/>
    <updated>2013-05-11T18:46:00+08:00</updated>
    <id>http://txworking.github.io/blog/2013/05/11/use-awk-to-diff-file</id>
    <content type="html"><![CDATA[<p>平时在CLI环境里面需要经常比较两个小文件的内容，最近专门搜索了下，收集了两个简单的比较方案。</p>

<h3>方案1：</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>cat a | grep -vFf b
</span></code></pre></td></tr></table></div></figure>


<p>如果想要不区分大小写，加-i参数即可</p>

<h3>方案2：</h3>

<p>如果数据量到达1000w以上，grep很容易占满内存，无法使用</p>

<p>这个时候就需要使用awk了</p>

<p>比如要比较a和b两个文件；
a             b
1             1
qw            2
qq            d
123           cd</p>

<p>列出b文件中完全不包含a文件的行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='awk'><span class='line'><span class="nx">awk</span> <span class="s1">&#39;ARGIND==1 {arr[$0]} ARGIND&gt;1&amp;&amp;!($0 in arr) {print $0}&#39;</span> <span class="nx">a</span> <span class="nx">b</span>
</span><span class='line'>
</span><span class='line'><span class="nx">awk</span> <span class="s1">&#39;NR==FNR {arr[$0]} NR&gt;FNR&amp;&amp;!($0 in arr) {print $0}&#39;</span> <span class="nx">a</span> <span class="nx">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>解释：</p>

<p>首先awk会按顺序先处理a文件，在处理b文件；</p>

<p>然后根据awk的环境变量列表：</p>

<pre><code>$n           当前记录的第n个字段，字段间由FS分隔。
$0           完整的输入记录。
ARGC         命令行参数的数目。
ARGIND       命令行中当前文件的位置(从0开始算)。
ARGV         包含命令行参数的数组。
CONVFMT      数字转换格式(默认值为%.6g)
ENVIRON      环境变量关联数组。
ERRNO        最后一个系统错误的描述。
FIELDWIDTHS  字段宽度列表(用空格键分隔)。
FILENAME     当前文件名。FNR同NR，但相对于当前文件。
FS           字段分隔符(默认是任何空格)。
IGNORECASE   如果为真，则进行忽略大小写的匹配。
NF           当前记录中的字段数。
NR           当前记录数。
OFMT         数字的输出格式(默认值是%.6g)。
OFS          输出字段分隔符(默认值是一个空格)。
ORS          输出记录分隔符(默认值是一个换行符)。
RLENGTH      由match函数所匹配的字符串的长度。
RS           记录分隔符(默认是一个换行符)。 
RSTART       由match函数所匹配的字符串的第一个位置。
SUBSEP       数组下标分隔符(默认值是\034)。
</code></pre>

<p>NR==FNR时是在处理a，将当前行放入数组</p>

<p>NR>FNR时是在处理b，如果当前行不在数组中，则打印</p>

<p>相应的ARGIND==1 正在处理a，ARGIND > 1 正在处理文件b</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby2.0关键字参数使用小记]]></title>
    <link href="http://txworking.github.io/blog/2013/04/09/install-ruby2-dot-0/"/>
    <updated>2013-04-09T11:26:00+08:00</updated>
    <id>http://txworking.github.io/blog/2013/04/09/install-ruby2-dot-0</id>
    <content type="html"><![CDATA[<p>Ruby2.0发布了，于是下来试试手。
下载了源码包，直接<code>./configure &amp;&amp; make &amp;&amp; make install</code>安装，没加特殊的flag。</p>

<p>安装过程中出现了几个问题：</p>

<ul>
<li>系统时间不对，在<code>make</code>的时候检查文件时间戳出错，不断的重复执行<code>configure</code>，使用ntp服务同步时间解决</li>
<li>在pry环境中不能使用上下方向键，错误信息是rb-readline有问题，在pry的 <a href="https://github.com/pry/pry/issues/863/">Github Issues</a> 里面找到问题，是rb-readline版本问题，重新安装最新版本解决</li>
</ul>


<p>然后试用了几个2.0的新特性，对我来说<code>关键字参数</code>最适用，其他几个<code>Refinements</code>、<code>Lazy enumerables</code>、<code>Module prepending</code>平时元编程和函数编程用得不多，暂时用不上。</p>

<p>对于关键字参数，Python里面已经有了，没什么好说的。</p>

<p>Ruby中关键字参数的两个要点：</p>

<ul>
<li>位置：定义的时候只能是 <code>a, *b, c: 1, **d, &amp;e</code> 的顺序</li>
<li>使用：调用时必须指明参数名称。这点和Python不同，Python可以根据参数的顺序来推断。</li>
</ul>


<p>对于如下定义的函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="ss">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">c</span><span class="p">:</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">print</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用时使用<code>func(4,5,6)</code>会提示<code>wrong number of arguments</code>，
只能是<code>func(a: 4, b: 5, c: 6)</code>的形式，这个时候顺序可以随意了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autoload in Ruby]]></title>
    <link href="http://txworking.github.io/blog/2013/03/21/autoload-in-ruby/"/>
    <updated>2013-03-21T16:56:00+08:00</updated>
    <id>http://txworking.github.io/blog/2013/03/21/autoload-in-ruby</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[主要PaaS平台支持语言清单]]></title>
    <link href="http://txworking.github.io/blog/2013/03/15/list-of-paas/"/>
    <updated>2013-03-15T21:36:00+08:00</updated>
    <id>http://txworking.github.io/blog/2013/03/15/list-of-paas</id>
    <content type="html"><![CDATA[<table style="width:100%;" border="1" bordercolor="#000000" cellpadding="2" cellspacing="0" class="table table-bordered table-striped table-condensed">
<tbody>
<tr>
<td>
<br />
</td>
<td>
<span></span>AWS<span></span> Elastic Beanstalk<br />
</td>
<td>
GAE<br />
</td>
<td>
Windows Azure<br />
</td>
<td>
CloudFoundry<br />
</td>
<td>
Heroku<br />
</td>
<td>
OpenShift<br />
</td>
<td>
SAE<br />
</td>
<td>
BAE<br />
</td>
<td>
tsuru(基于Juju）<br />
</td>
</tr>
<tr>
<td>
Java<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
&nbsp; x<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
&nbsp; x<br />
</td>
<td>
&nbsp; x<br />
</td>
<td>
<br />
</td>
</tr>
<tr>
<td>
Ruby<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
&nbsp; <br />
</td>
<td>
&nbsp;<br />
</td>
<td>
<br />
</td>
</tr>
<tr>
<td>
PHP<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x <br />
</td>
<td>
<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x*<br />
</td>
<td>
&nbsp;&nbsp; <br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
&nbsp; x<br />
</td>
<td>
&nbsp; x<br />
</td>
<td>
<br />
</td>
</tr>
<tr>
<td>
Python<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
&nbsp; x<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x*&nbsp; <br />
</td>
<td>
&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
&nbsp; x<br />
</td>
<td>
&nbsp; x<br />
</td>
<td>
<br />
</td>
</tr>
<tr>
<td>
.NET<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x*<br />
</td>
<td>
&nbsp;<br />
</td>
<td>
&nbsp;&nbsp;&nbsp; <br />
</td>
<td>
<br />
</td>
<td>
<br />
</td>
<td>
<br />
</td>
</tr>
<tr>
<td>
Node.js<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x <br />
</td>
<td>
&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
<br />
</td>
<td>
<br />
</td>
<td>
<br />
</td>
</tr>
<tr>
<td>
Perl<br />
</td>
<td>
<br />
</td>
<td>
<br />
</td>
<td>
<br />
</td>
<td>
<br />
</td>
<td>
<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
<br />
</td>
<td>
<br />
</td>
<td>
<br />
</td>
</tr>
<tr>
<td>
Standalone<br />
</td>
<td>
<br />
</td>
<td>
<br />
</td>
<td>
<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
<br />
</td>
<td>
&nbsp;<br />
</td>
<td>
<br />
</td>
<td>
<br />
</td>
<td>
<br />
</td>
</tr>
<tr>
<td>
DIY<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
<br />
</td>
<td>
<br />
</td>
<td>
<br />
</td>
<td>
<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x<br />
</td>
<td>
<br />
</td>
<td>
<br />
</td>
<td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x<br />
</td>
</tr>
</tbody>
</table>


<br />


<ul>
<li>Cloud Foundry对这些语言的支持是社区提供的。
Cloud Foundry.com支持Java、Ruby和Node，而ActiveState添加了对Python的支持，Tier 3添加了对.NET的支持，AppFog添加了对PHP的支持。</li>
</ul>


<p> 免费的AWS Elastic Beanstalk其实还包含了一种IaaS（Infrastructure-as-a-Service）产品。开发人员和管理员可以直接访问应用程序后 面的AWS基础设施，这意味着他们可以修改服务器配置或访问服务端的日志文件。用户负责各种基础设施相关的任务，包括选择（及更新）服务器的操作系统和应 用程序栈。AWS Elastic Beanstalk确实也自动化了很多管理任务，包括通过一条命令重新启动所有的web服务器、通过中心位置访问所有的服务器日志文件以及监控所有节点的性能。</p>

<p>OpenShift也提供对IaaS基础设施的直接访问，这样就可以让用户添加所有想要的语言和框架。其后台使用的是 Red Hat Enterprise Linux 6.2 running on x64 systems.</p>

<p>表格部分内容来自 <a href="http://www.infoq.com/cn/news/2012/11/aws-elastic-beanstalk-ruby">InfoQ</a> ，争取能定时更新此表格</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BOSH初步研究]]></title>
    <link href="http://txworking.github.io/blog/2013/01/29/research-of-bosh/"/>
    <updated>2013-01-29T23:24:00+08:00</updated>
    <id>http://txworking.github.io/blog/2013/01/29/research-of-bosh</id>
    <content type="html"><![CDATA[<h1>BOSH的组件结构</h1>

<h2>BOSH总体架构</h2>

<h2>Director</h2>

<h2>Worker</h2>

<h2>Agent</h2>

<h2>Message Bus</h2>

<h2>Health Monitor</h2>

<h1>BOSH执行部署的主要流程</h1>

<h1>BOSH release的组成</h1>

<h1>BOSH stemcell的组成</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Staring an Open-Source Project]]></title>
    <link href="http://txworking.github.io/blog/2013/01/07/staring-an-open-source-project/"/>
    <updated>2013-01-07T21:44:00+08:00</updated>
    <id>http://txworking.github.io/blog/2013/01/07/staring-an-open-source-project</id>
    <content type="html"><![CDATA[<p>在开源中国上参与翻译了一篇如何运作开源项目的文章，把自己翻译的部分整理下发出来。
<a href="http://www.oschina.net/translate/starting-open-source-project">译文</a>
<a href="http://coding.smashingmagazine.com/2013/01/03/starting-open-source-project/">原文</a></p>

<h3>Tag Versions in Source Control</h3>

<p>When you decide on a new release, use a source-control tag to mark the state of the code for that release. I started doing this for CSS Lint as soon as we started using version numbers. I didn’t think much of it until the first time I forgot to tag a release and a bug was filed by someone looking for that tag. It turns out that developers like to check out particular versions of code.</p>

<p>Tie the tag obviously to the version number by including the version number directly in the tag’s name. With CSS Lint, our tags are in the format of “v0.9.9.” This will make it very easy for anyone looking through tags to figure out what those tags mean — including you, because you’ll be able to better keep track of what changes have been made in each release.</p>

<h3>Change Logs</h3>

<p>Another benefit of versioning is in producing change logs. Change logs are important for communicating version differences to both end users and contributors. The added benefit of tagging versions and source control is that you can automatically generate change logs based on those tags. CSS Lint’s build system automatically creates a change log for each release that includes not just the commit message but also the contributor. In this way, the change log becomes a record not only of code changes, but also of contributions from the community.</p>

<h3>Availability Announcements</h3>

<p>Whenever a new version of the project is available, announce its availability somewhere. Whether you do this on a blog or on the mailing list (or in both places), formally announcing that a new version is available is very important. The announcement should include any major changes made in the code, as well as who has contributed those changes. Contributors tend to contribute more if they get some recognition for their work, so reward the people who have taken the time to contribute to your project by acknowledging their contribution.</p>

<h2>Managing Contributions</h2>

<p>Once you have everything set up, the next step is to figure out how you will accept contributions. Your contribution model can be as informal or formal as you’d like, depending on your goals. For a personal project, you might not have any formal contribution process. The developer guide would lay out what is necessary in order for the code to be merged into the repository and would state that as long as a submission follows that format, then the contribution will be accepted. For a larger project, you might want to have a more formal policy.</p>

<p>The first thing to look into is whether you will require a contributor license agreement (CLA). CLAs are used in many large open-source projects to protect the legal rights of the project. Every person who submits code to the project would need to fill out a CLA certifying that any contributed code is original work and that the copyright for that work is being turned over to the project. CLAs also give the project owner license to use the contribution as part of the project, and it warrants that the contributor isn’t knowingly including code to which someone else has a copyright, patent or other right. jQuery, YUI and Dojo all require CLAs for code submissions. If you are considering requiring a CLA from contributors, then getting legal advice regarding it and your licensing structure would be worthwhile.</p>

<p>Next, you may want to establish a hierarchy of people working on the project. Open-source projects typically have three primary designations:</p>

<ul>
<li>Contributor</li>
</ul>


<p>Anyone who has had source code merged into the repository is considered a contributor. The contributor cannot access the repository directly but has submitted patches that have been accepted.</p>

<ul>
<li>Committer</li>
</ul>


<p>People who have direct access to the repository are committers. These people work on features and fix bugs regularly, and they submit code directly to the repository.</p>

<ul>
<li>Reviewer</li>
</ul>


<p>The highest level of contributor, reviewers are commanders who also have directional impact on the project. Reviewers fulfill their title by reviewing submissions from contributors and committers, approving or denying patches, promoting or demoting committers, and generally running the project.</p>

<p>If you’re going to have a formal hierarchy such as this, you’ll need to draft a document that describes the role of each type of contributor and how one may be promoted through the ranks. YUI has just created a formal “ Contributor Model,” along with excellent documentation on roles and responsibilities.</p>

<p>At the moment, CSS Lint doesn’t require a CLA and doesn’t have a formal contribution model in place, but everyone should consider it as their open-source project grows.</p>

<h2>The Proof</h2>

<p>It probably took us about six months from its initial release to get CSS Lint to the point of being a fully functioning open-source project. Since then, over a dozen contributors have submitted code that is now included in the project. While that number might seem small by the standard of a large open-source project, we take great pride in it. Getting one external contribution is easy; getting contributions over an extended period of time is difficult.</p>

<p>And we know that we’ve been doing something right because of the feedback we receive. Jonathan Klein recently took to the mailing list to ask some questions and ended up submitting a pull request that was accepted into the project. He then emailed me this feedback:</p>

<blockquote><p>I just wanted to say that I think CSS Lint is a model open-source project — great documentation, easy to extend, clean code,
fast replies on the mailing list and to pull requests, and easily customizable to fit any environment. Starting to do
development on CSS Lint was as easy as reading a couple of wiki pages, and the fact that you explicitly called out the typical
workflow of a change made the barrier to entry extremely low. I wish more open-source projects would follow suit and make it
easy to contribute.</p></blockquote>

<p>Getting emails like this has become commonplace for CSS Lint, and it can become the norm for your project, too, if you take the time to set up a sustainable eco-system. We all want our projects to succeed, and we want people to want to contribute to them. As Jonathan said, make the barrier to entry as low as possible and developers will find ways to help out.</p>

<h3>源码控制中的标记版本</h3>

<p>当你决定要发布一个新版本时，应用源码控制标记来标注此版本的代码状态。当我们开始在CSS Lint中使用版本号，我也就开始这么做了。开始我没考虑那么多，直到有一次我忘了给一个发布版添加标记，但是发现某位开发者提交的bug却是针对那个特定标记的。这说明开发者们更倾向于检出特定版本的代码。</p>

<p>要让标记和版本号的绑定关系更明确，就把版本号直接包含在标记名称中。在CSS Lint中，我们的标记都使用“v0.9.9”这种格式。这样可以让每个人都能够很容易地通过标记名称来识别其含义 — 包括你自己，因为你也将能够更好地跟踪每次版本发布的改动。</p>

<h3>变更日志</h3>

<p>版本管理还有一个好处就是能够生成变更日志。不管是对最终用户和贡献者，变更日志都是沟通版本差异时的重要依据。版本标记和源码控制有一个附加好处，你能基于这些标记自动生成变更日志。CSS Lint的构建系统能够在每次发布是自动生成一个包含提交信息及其贡献者的变更日志。这样变更日志就不仅只是一个代码变更记录，也是社区贡献值的记录。</p>

<h3>可用宣告</h3>

<p>每当项目发布一个新版本时，都应该在某处发布宣告。不论是在你的博客或邮件列表或是在两者上都发布，正式宣告项目新版本已经可用是非常重要的。这份宣告应该包括项目代码的主要改动及其贡献者。对贡献者工作的认同是对他们的最大鼓励，能从贡献代码中获得更多的认同感他们就更有动力做更多的贡献。所以给予那些耗费无数精力在你的项目中的开发者以最大的赞扬吧。</p>

<h2>管理代码贡献</h2>

<p>万事俱备，下一步就是解决如何接受代码贡献。 你的贡献模型是非常规范还是很随意，取决于你的喜好和目标。对于个人项目，可能不需要什么规范的贡献流程。开发者指南应该说明合并代码到仓库的必要条件，一个提交先要满足这些条件才会被接受。对于更大的项目，则应该要有更多规范的策略。</p>

<p>首先要考虑的是是否需要一个贡献者许可协议（CLA）。CLA在很多大型开源项目中使用以保护项目的合法权利。每位提交代码的开发者都需要同意CLA，以承诺任何贡献的代码都是原创的同时将代码的版权移交给项目所有。CLA也赋予项目所有者将贡献的代码作为项目一部分的授权，而且要求贡献者保证不会故意将他人具有版权、专利或其他权利的代码包含在自己的代码中进行提交。jQuery, YUI 和 Dojo 在代码提交时都要求贡献者同意CLA。如果你正在考虑使用CLA，那么寻求一些法律咨询是很值得的。</p>

<p>接下来，你可能想要为项目的工作人员建立一个权限层次。开源项目一般都会设置三个主要的称号：</p>

<ul>
<li>贡献者</li>
</ul>


<p>任何对项目做过代码贡献的人都可以算作贡献者。贡献者不能直接访问代码仓库，但是提交的补丁可以被接受。</p>

<ul>
<li>提交者</li>
</ul>


<p>提交者有权限直接访问代码仓库。他们经常对项目做特性添加和bug修正，也能够直接提交代码到代码仓库。</p>

<ul>
<li>审查者</li>
</ul>


<p>审查者是更高一级的贡献者，是能够对项目产生直接影响的指挥官。他们的职责就是审查贡献者和提交者提交的代码，批准或者否决补丁，任命或者撤销提交者称号，总的来说就是运作这个项目。</p>

<p>如果你打算采用刚才所说的权限层次，那么接下来就需要起草一份文档来描述每种类型的贡献者的角色和贡献者角色如何通过排名来进行提升。YUI最近创建了一个很正式的“贡献者模型”，有很优秀的文档来描述角色和职责。</p>

<p>目前CSS Lint没有CLA，也没有正式的贡献者模型，但是每个人都应该在自己的开源项目成长过程中认真考虑这件事。</p>

<h2>证明</h2>

<p>从CSS Lint第一次发布到形成一个全功能的开源项目大概花了我们差不多6个月时间。从那时开始，超过一打的贡献者提交的代码被接受。尽管这个数字按照一个大型开源项目的标准来说有点少，但我们仍然对此感到骄傲。获得一次外部贡献很容易，在很长一段时间内都能持续获得帮助可不容易。</p>

<p>而且我们明白自己做的所有努力都是正确的，原因就是我们收到很多积极的反馈。乔纳森·克莱因最近到项目的邮件列表里问了几个问题，在最后他也提交了一个pull request并被项目接受了。接着他就给我发了一封反馈邮件：</p>

<blockquote><p>我想说CSS Lint就是开源项目的典范-文档优秀，扩展方便，代码简洁，反馈及时，定制方便。基于CSS Lint做开发就像阅读wiki一样容易，而且事
实上你提出的特有更改工作流使得项目的进入门槛变得很低。我希望有更多的开源项目能照着做，让开发者为其做共享更容易。</p></blockquote>

<p>对CSS Lint来说收到这样的邮件已经是司空见惯的事了。如果你愿意花点时间为自己的项目建立一个可持续发展的生态系统，这种事在你的项目里也一样会成为常态。每个人都希望自己的项目能成功，都希望有大量的开发者来做贡献。但是就像乔纳森说的一样：尽量降低门槛，开发者们自然会找到方法来帮忙的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Razor的架构研究]]></title>
    <link href="http://txworking.github.io/blog/2013/01/02/razor-architecture/"/>
    <updated>2013-01-02T14:05:00+08:00</updated>
    <id>http://txworking.github.io/blog/2013/01/02/razor-architecture</id>
    <content type="html"><![CDATA[<p><img src="http://txworking.github.io/images/my/razor_mk.png"></p>

<h2>Razor对iPXE的使用</h2>

<p>iPXE是Razor主要依赖的技术，配合iPXE就能实现服务器节点固件和Razor的交互。
iPXE是开源的网络启动固件，提供了全部的PXE功能，而且加入更多的高级特性，
比如：支持从HTTP服务器、iSCSI SAN、FC SAN、AoE SAN、无线网络、广域网、Infiniband网络启动；通过脚本控制boot流程。</p>

<p>Razor主要利用HTTP服务器启动和脚本控制两个特性。</p>

<ul>
<li>部分网卡需要特殊配置以支持通过iPXE安装Razor-Microkernel</li>
</ul>


<h3>服务器启动时</h3>

<p>搭建iPXE服务需要DHCP服务和ftp服务，具体过程就不详述了。
服务器在进行网络启动时，iPXE会根据配置提供两种boot方式。下面的代码清单是iPXE的默认配置。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>default menu.c32
</span><span class='line'>prompt 0
</span><span class='line'>menu title Razor Boot Menu
</span><span class='line'>
</span><span class='line'>timeout 50
</span><span class='line'>f1 help.txt
</span><span class='line'>f2 version.txt
</span><span class='line'>
</span><span class='line'>label razor-boot
</span><span class='line'>  menu label Automatic Razor Node Boot
</span><span class='line'>  kernel ipxe.lkrn
</span><span class='line'>  append initrd=razor.ipxe
</span><span class='line'>
</span><span class='line'>label boot-else
</span><span class='line'>  menu label Bypass Razor
</span><span class='line'>  localboot 1</span></code></pre></td></tr></table></div></figure>


<p>可以看到，使用razor-boot方式会下载tftp服务器上的ipxe.lkrn和razor.ipxe脚本文件进行启动，如下图所示</p>

<p><img src="http://txworking.github.io/images/my/ipxe.png"></p>

<p>服务器会根据razor.ipxe脚本文件向Razor Server发起http请求，从这里就开始进入Razor的控制流程。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!ipxe
</span><span class='line'>
</span><span class='line'>isset ${net0/mac} && dhcp net0 ||
</span><span class='line'>isset ${net1/mac} && dhcp net1 ||
</span><span class='line'>isset ${net2/mac} && dhcp net2 ||
</span><span class='line'>isset ${net3/mac} && dhcp net3 ||
</span><span class='line'>isset ${net4/mac} && dhcp net4 ||
</span><span class='line'>isset ${net5/mac} && dhcp net5 ||
</span><span class='line'>isset ${net6/mac} && dhcp net6 ||
</span><span class='line'>isset ${net7/mac} && dhcp net7 ||
</span><span class='line'>
</span><span class='line'>chain http://168.1.43.39:8026/razor/api/boot?hw_id=${net0/mac}_${net1/mac}_${net2/mac}_${net3/mac}_$
</span><span class='line'>{net4/mac}_${net5/mac}_${net6/mac}_${net7/mac} || goto error
</span><span class='line'>
</span><span class='line'>:error
</span><span class='line'>sleep 15
</span><span class='line'>reboot</span></code></pre></td></tr></table></div></figure>


<p>Razor最终会返回http应答，其中包含可执行iPXE脚本，告诉服务器按何种方式启动。
比如，服务器是首次启动，则会告诉服务器下载Razor-Microkernel并启动。
下面的代码清单说明Razor返回的执行脚本内容，其中指明了kernel和initrd的下载路径</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">get_boot_script</span><span class="p">(</span><span class="n">default_mk</span><span class="p">)</span>
</span><span class='line'>        <span class="n">image_svc_uri</span> <span class="o">=</span> <span class="s2">&quot;http://</span><span class="si">#{</span><span class="vi">@config</span><span class="o">.</span><span class="n">image_svc_host</span><span class="si">}</span><span class="s2">:</span><span class="si">#{</span><span class="vi">@config</span><span class="o">.</span><span class="n">image_svc_port</span><span class="si">}</span><span class="s2">/razor/image/mk/</span><span class="si">#{</span><span class="n">default_mk</span><span class="o">.</span><span class="n">uuid</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="n">rz_mk_boot_debug_level</span> <span class="o">=</span> <span class="vi">@config</span><span class="o">.</span><span class="n">rz_mk_boot_debug_level</span>
</span><span class='line'>        <span class="c1"># only allow values of &#39;quiet&#39; or &#39;debug&#39; for this parameter; if it&#39;s anything else set it</span>
</span><span class='line'>        <span class="c1"># to an empty string</span>
</span><span class='line'>        <span class="n">rz_mk_boot_debug_level</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span> <span class="k">unless</span> <span class="o">[</span><span class="s1">&#39;quiet&#39;</span><span class="p">,</span><span class="s1">&#39;debug&#39;</span><span class="o">].</span><span class="n">include?</span> <span class="n">rz_mk_boot_debug_level</span>
</span><span class='line'>        <span class="n">boot_script</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>        <span class="n">boot_script</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;#!ipxe</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="n">boot_script</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;kernel </span><span class="si">#{</span><span class="n">image_svc_uri</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">default_mk</span><span class="o">.</span><span class="n">kernel</span><span class="si">}</span><span class="s2"> maxcpus=1&quot;</span>
</span><span class='line'>        <span class="n">boot_script</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot; </span><span class="si">#{</span><span class="n">rz_mk_boot_debug_level</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">rz_mk_boot_debug_level</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">rz_mk_boot_debug_level</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>        <span class="n">boot_script</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot; || goto error</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="n">boot_script</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;initrd </span><span class="si">#{</span><span class="n">image_svc_uri</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">default_mk</span><span class="o">.</span><span class="n">initrd</span><span class="si">}</span><span class="s2"> || goto error</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="n">boot_script</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;boot || goto error</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="n">boot_script</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;</span><span class="se">\n\n\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="n">boot_script</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;:error</span><span class="se">\n</span><span class="s2">echo ERROR, will reboot in </span><span class="si">#{</span><span class="vi">@config</span><span class="o">.</span><span class="n">mk_checkin_interval</span><span class="si">}</span><span class="se">\n</span><span class="s2">sleep </span><span class="si">#{</span><span class="vi">@config</span><span class="o">.</span><span class="n">mk_checkin_interval</span><span class="si">}</span><span class="se">\n</span><span class="s2">reboot</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="n">boot_script</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>下图是Razor Server的日志，可以看到hw_id为043a的节点在通过iPXE发起boot请求后，Server返回了Razor-Microkernl的地址。</p>

<p><img src="http://txworking.github.io/images/my/boot.png"></p>

<p>对于服务器，在收到http应答后会执行脚本到指定地址下载Razor-Microkernel并启动，下图为服务器控制台输出</p>

<p><img src="http://txworking.github.io/images/my/mk.png"></p>

<h3>OS安装过程中</h3>

<p>在iPXE发起boot的http请求时，如果Razor Server发现node已经和policy进行了绑定，则返回http应答中包含的执行脚本会指明OS镜像的路径。
例如，安装Ubuntu时，返回的iPXE脚本如下代码清单所示，此代码清单为Ubuntu ModelTemplate的一部分</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!ipxe</span>
</span><span class='line'><span class="n">echo</span> <span class="no">Razor</span> <span class="o">&lt;</span><span class="sx">%= @label %&gt; model boot_call</span>
</span><span class='line'><span class="sx">echo Installation node UUID : &lt;%=</span> <span class="n">node</span><span class="o">.</span><span class="n">uuid</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">echo Installation image UUID: &lt;%= @image_uuid %&gt;</span>
</span><span class='line'><span class="n">echo</span> <span class="no">Active</span> <span class="no">Model</span> <span class="n">node</span> <span class="ss">state</span><span class="p">:</span> <span class="o">&lt;</span><span class="sx">%= @current_state %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">sleep 3</span>
</span><span class='line'><span class="sx">kernel &lt;%=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">image_svc_uri</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="vi">@image_uuid</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">kernel_path</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">kernel_args</span><span class="p">(</span><span class="n">policy_uuid</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span> <span class="sx">%&gt; || goto error</span>
</span><span class='line'><span class="sx">initrd &lt;%= &quot;</span><span class="si">#{</span><span class="n">image_svc_uri</span><span class="si">}</span><span class="sx">/</span><span class="si">#{</span><span class="vi">@image_uuid</span><span class="si">}</span><span class="sx">/</span><span class="si">#{</span><span class="n">initrd_path</span><span class="si">}</span><span class="sx">&quot; %&gt;</span> <span class="o">||</span> <span class="n">goto</span> <span class="n">error</span>
</span><span class='line'><span class="n">boot</span>
</span></code></pre></td></tr></table></div></figure>


<p>如下图所示，iPXE会到指定路径下载Ubuntu安装镜像进行启动</p>

<p><img src="http://txworking.github.io/images/my/os.png"></p>

<h2>OS安装过程详解</h2>

<h3>Razor-Microkernel发现Server方法</h3>

<p>MK在启动时会检测Server的IP地址并主动进行checkin操作，检测方式有两种：</p>

<ol>
<li>在/proc/cmdline 文件中查找razor.ip或razor.server值作为Server的IP地址</li>
<li>使用/etc/resolv.conf中的DNS服务器IP地址作为Server的IP地址</li>
</ol>


<p>具体代码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">discover_rz_server_ip</span>
</span><span class='line'>      <span class="n">discover_by_pxe</span> <span class="ow">or</span> <span class="n">discover_by_dns</span> <span class="ow">or</span> <span class="n">discover_by_dhcp</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">def</span> <span class="nf">discover_by_pxe</span>
</span><span class='line'>      <span class="k">begin</span>
</span><span class='line'>        <span class="n">contents</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;/proc/cmdline&quot;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">server_ip</span> <span class="o">=</span> <span class="n">contents</span><span class="o">.</span><span class="n">split</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="vg">$1</span> <span class="k">if</span> <span class="n">x</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/razor.ip=(.*)/</span><span class="p">)}</span><span class="o">.</span><span class="n">compact</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">server_ip</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">server_ip</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">rescue</span>
</span><span class='line'>        <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'> <span class="k">def</span> <span class="nf">discover_by_dns</span>
</span><span class='line'>      <span class="k">begin</span>
</span><span class='line'>        <span class="n">contents</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;/proc/cmdline&quot;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">server_name</span> <span class="o">=</span> <span class="n">contents</span><span class="o">.</span><span class="n">split</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="vg">$1</span> <span class="k">if</span> <span class="n">x</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/razor.server=(.*)/</span><span class="p">)}</span><span class="o">.</span><span class="n">compact</span>
</span><span class='line'>        <span class="n">server_name</span> <span class="o">=</span> <span class="n">server_name</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">server_name</span><span class="o">.</span><span class="n">join</span> <span class="p">:</span> <span class="s1">&#39;razor&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">require</span> <span class="s1">&#39;socket&#39;</span>
</span><span class='line'>        <span class="k">return</span> <span class="no">TCPSocket</span><span class="o">.</span><span class="n">gethostbyname</span><span class="p">(</span><span class="n">server_name</span><span class="p">)</span><span class="o">[</span><span class="mi">3</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">first</span> <span class="o">||</span> <span class="kp">false</span>
</span><span class='line'>      <span class="k">rescue</span>
</span><span class='line'>        <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">def</span> <span class="nf">discover_by_dhcp</span>
</span><span class='line'>      <span class="n">udhcp_file</span> <span class="o">=</span> <span class="s2">&quot;/tmp/nextServerIP.addr&quot;</span>
</span><span class='line'>      <span class="k">begin</span>
</span><span class='line'>        <span class="n">contents</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">udhcp_file</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">contents</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>      <span class="k">rescue</span>
</span><span class='line'>        <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Razor的程序结构</h2>

<p>Razor的主要程序结构如下图所示：</p>

<p><img src="http://txworking.github.io/images/my/node_boot.png"></p>

<p>典型流程：</p>

<ul>
<li>node通过REST调用<a href="http://serverIP:8026/razor/api/node/checkin?json_hash=">http://serverIP:8026/razor/api/node/checkin?json_hash=</a>&lsquo;{hw_id=xxxxx,last_state=xxxx}</li>
<li>Node.js服务器解析REST请求，并执行shell命令：razor -w node checkin &lsquo;{hw_id=xxxxx,last_state=xxxx}</li>
<li>slice负责解析此shell命令，并调用相应方法返回应答</li>
</ul>


<h2>Razor中Policy的绑定过程</h2>

<p>先解释一下概念</p>

<ul>
<li>Node：能够被Razor管理到的一台服务器就是一个Node，可以是虚拟化或物理机</li>
<li>Model：Razor中将一种OS类型的安装方式抽象为一个model，比如针对Ubuntu Precise的安装就会有一个precise的model存在，其中详细定义了OS的安装配置、安装过程、安装中的状态变化、安装中Node和Razor的交互、安装后的处理等等。model是和OS类型紧密相关的。</li>
<li>Policy：Razor根据Policy将Node和Model联系在一起。Policy与Model为1对1，与Node为1对N关系。Policy的匹配规则类似防火墙的过滤规则，具有先后优先级。优先级高的Policy会先生效，并将Model和Node绑定。</li>
<li>Active_model：Active_model是一个Policy对象，可以理解为生效的Policy。Razor发现某个Node符合一条Policy规则，则生成一个Policy对象，将状态设定为active，指明绑定的Node。之后OS的安装过程，Node都是根据这个Active_model定义的流程和规则在进行操作。</li>
</ul>


<p><img src="http://txworking.github.io/images/my/node_binding.png"></p>

<p>current_state与返回命令的映射表如下图：</p>

<p><img src="http://txworking.github.io/images/my/state.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Windows7的Git环境中使用WinMerge作为difftool]]></title>
    <link href="http://txworking.github.io/blog/2012/12/11/using-winmerge-with-git/"/>
    <updated>2012-12-11T14:55:00+08:00</updated>
    <id>http://txworking.github.io/blog/2012/12/11/using-winmerge-with-git</id>
    <content type="html"><![CDATA[<p>在Git使用WinMerge作为difftool，使用Git的环境不同需要不一样的配置，而且两种配置不通用。</p>

<h3>使用CMD</h3>

<h4>添加配置</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git config --global diff.tool winmerge
</span><span class='line'>git config --global difftool.winmerge.cmd <span class="s2">&quot;C:/git-difftool.bat \&quot;$LOCAL\&quot; \&quot;$REMOTE\&quot;&quot;</span>
</span><span class='line'>git config --global difftool.prompt <span class="nb">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以手动在.gitconfig文件中添加如下配置</p>

<pre><code>[diff]
    tool = winmerge
[difftool "winmerge"]
    cmd = C:/git-difftool.bat \"$LOCAL\" \"$REMOTE\"
[difftool]
    prompt = false
</code></pre>

<h4>在指定位置创建git-difftool.bat</h4>

<h4>在git-difftool.bat中添加一行</h4>

<pre><code>"C:/Program Files/WinMerge/WinMergeU.exe" -e -ub -dl "Base" -dr "Mine" "$1" "$2"
</code></pre>

<h3>使用Git Bash</h3>

<p>步骤和之前的一样，只是需要注意<strong>转义符</strong>和<strong>路径</strong>的写法。</p>

<h4>添加配置</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git config --global diff.tool winmerge
</span><span class='line'>git config --global difftool.winmerge.cmd <span class="s2">&quot;/C/git-difftool.bat \&quot;\$LOCAL\&quot; \&quot;\$REMOTE\&quot; &quot;</span>
</span><span class='line'>git config --global difftool.prompt <span class="nb">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以手动在.gitconfig文件中添加如下配置</p>

<pre><code>[diff]
    tool = winmerge
[difftool "winmerge"]
    cmd = /C/git-difftool.bat "$LOCAL" "$REMOTE"
[difftool]
    prompt = false
</code></pre>

<h4>在指定位置创建git-difftool.bat</h4>

<h4>在git-difftool.bat中添加一行</h4>

<pre><code>"/C/Program Files/WinMerge/WinMergeU.exe" -e -ub -dl "Base" -dr "Mine" "$1" "$2"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Juju-Gui 安装笔记]]></title>
    <link href="http://txworking.github.io/blog/2012/12/11/juju-gui-install/"/>
    <updated>2012-12-11T11:01:00+08:00</updated>
    <id>http://txworking.github.io/blog/2012/12/11/juju-gui-install</id>
    <content type="html"><![CDATA[<p>在Ubuntu12.04 AMD64上安装成功，基本按照项目中的README照做就行了。</p>

<h4>juju-gui使用了<code>Node.js</code>和<code>sphinx</code>，所以需要先安装Node环境，<code>jshint</code>是可选的。</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo add-apt-repository ppa:chris-lea/node.js
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install nodejs npm
</span><span class='line'>sudo npm install -g jshint
</span><span class='line'>sudo apt-get install python-sphinx
</span></code></pre></td></tr></table></div></figure>


<h4>从<code>Lanunchpad</code>下载代码</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get install bzr
</span><span class='line'>bzr launchpad-login yourid
</span><span class='line'>bzr branch lp:juju-gui
</span><span class='line'><span class="nb">cd </span>juju-gui
</span><span class='line'>make server
</span></code></pre></td></tr></table></div></figure>


<p>这就可以访问localhost:8888看到界面了。要能操作还需要一个Juju环境，根据文档说Juju默认版本里面没有api-server这功能，最好是使用<code>lp:~hazmat/juju/rapi-delta</code>这个分支。</p>

<h4>安装Juju</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span> ~
</span><span class='line'>sudo bzr branch lp:~hazmat/juju/rapi-delta
</span><span class='line'><span class="nb">cd </span>rapi-delta
</span><span class='line'>python setup.py install
</span></code></pre></td></tr></table></div></figure>


<p>然后修改用户目录下的<code>.juju/environments.yaml</code>，在最后添加<code>api-port: 8081</code>，特别要注意缩进，不然启动都出错。</p>

<p>再到bin目录下启动Juju</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd </span>bin
</span><span class='line'>sudo ./juju bootstrap
</span></code></pre></td></tr></table></div></figure>


<p>看到 Starting api server 就说明配置成功了</p>

<p>这时用netstat查看会发现8081端口并没有开始监听，需要先手动部署一个服务。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo ./juju deploy mysql
</span></code></pre></td></tr></table></div></figure>


<p>Juju默认是会到官方的<code>Charm Store</code>查找到mysql进行部署。</p>

<p>8081端口也会看到是listen状态了。</p>

<h4>连接Gui和Juju</h4>

<p>默认连接Juju的方式是在页面使用<code>Websocket</code>去连接<code>http://localhost:8081/ws</code>，所以需要修改配置把localhost改了，不然只能在本地访问。</p>

<p>修改Juju-gui里的config.js和app/config.js，把里面的localhost都改成服务器ip或者能解析的域名，重启一下服务，再访问就能看到已经有一个mysql部署好了，其他的charm也随你意安装了。</p>
]]></content>
  </entry>
  
</feed>
